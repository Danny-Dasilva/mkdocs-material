{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting started \u00b6 Begin by cloning the repo and pathing into it git clone https://github.com/Danny-Dasilva/mkdocs-material.git && cd mkdocs-material Install dependencies \u00b6 pipenv In case you do not have pipenv you can install it with pip install pipenv Install dependencies with pipenv install Warning: Your Pipfile requires python_version 3.8 This pipenv file was created using python 3.8 however it is not a requirement to run the package. You can tack on --python <$your version> to pipenv in order to run it with that python version. Example : pipenv install --python 3 .7 docker The Docker image is a great way to get up and running in a few minutes, as it comes with all dependencies pre-installed. Pull the image for the latest version with: docker pull dannydasilva/mkdocs-material The mkdocs executable is provided as an entry point and serve is the default command. If you're not familiar with Docker don't worry, the following sections cover how to serve build and deploy. The following plugins are bundled with the Docker image: markdown-include mkdocs-markdownextradata-plugin as well as others How can I add plugins to the Docker image? The docker container bundles useful and common plugins on top of the standard mkdocs container however if the plugin you want to use is not included, you can create a new Dockerfile and extend the Docker image with your custom installation routine: FROM dannydasilva/mkdocs-material RUN pip install ... Next, you can build the image with the following command. docker build -t dannydasilva/mkdocs-material . The new image can be used exactly like the default image, the commands below will operate the same. virtualenv or pip Using a virtual environment is not a requirement but is highly suggested. You can install the dependencies on the system with. pip install -r requirements.txt If you would prefer to use virtualenv you can install it with pip install virtualenv create the environment virtualenv venv Activate the environment Mac OS / Linux source venv/bin/activate Windows venv\\Scripts\\activate and finally install the dependencies pip install -r requirements.txt Make changes \u00b6 Feel free to make changes to the index.md or add your own files. The navigation tree is generated from the mkdocs.yaml file. Lets say I created example.md in /docs i could add it to the site navigation by adding the filename to the .yaml file. in mkdocs.yml 28 29 30 31 32 33 34 35 36 37 # add navigation here nav : - MkDocs : index.md - features.md - customization.md - Example - Nested folder : - Index.md with title : example-folder/index.md - Sub folder : - Custom Title : example-folder/sub-folder/index.md - example.md Nesting folders \u00b6 For larger sections where you need to break markdown files with a similar theme you may consider nesting your file structure. Lets say we wanted to add nested_example.md to docs/example-folder/sub-folder/ . We can add it to the navigation 28 29 30 31 32 33 34 35 36 37 38 # add navigation here nav : - MkDocs : index.md - features.md - customization.md - Example - Nested folder : - Index.md with title : example-folder/index.md - Sub folder : - Custom Title : example-folder/sub-folder/index.md - Nesting folder : example-folder/sub-folder/nested_example.md - example.md Note how the titles and navigation use the file name by default. You can overide this with the following syntax -Custom title: path/to/file.md Run Build and Deploy \u00b6 You can run mkdocs locally to preview changes, build out the html files or deploy to github pages with the following commands Run \u00b6 While you are editing your content you can use the live preview feature to see your changes. The server will automatically rebuild upon saving. By default the server will be hosted at localhost:8000 . pipenv Quick pipenv run mkdocs serve Work inside env alternatively you can shell into your pipenv instance and serve it there pipenv shell then mkdocs serve docker Mount the folder where your mkdocs.yml resides as a volume into /docs: Start development server on http://localhost:8000 docker run --rm -it -p 8000:8000 -v ${PWD}:/docs dannydasilva/mkdocs-material Deploy documentation to GitHub Pages docker run --rm -it -v ~/.ssh:/root/.ssh -v ${PWD}:/docs dannydasilva/mkdocs-material gh-deploy virtualenv or pip Assuming you are in a virtual environment mkdocs serve Build \u00b6 When you're finished editing, you can build a static site from your Markdown files with: pipenv Build Documentation pipenv run mkdocs build docker Build Documentation docker run --rm -it -v ${PWD}:/docs dannydasilva/mkdocs-material build virtualenv or pip Assuming you are in a virtual environment mkdocs build Deploy \u00b6 If you're already hosting your code on GitHub, GitHub Pages is certainly the most convenient way to publish your project documentation. It's free of charge and pretty easy to set up. pipenv deploy to gihub pages with: pipenv run mkdocs gh-deploy Your documentation should shortly appear at <$username>.github.io/<$your_github_repository> . docker Deploy documentation to GitHub Pages docker run --rm -it -v ~/.ssh:/root/.ssh -v ${PWD}:/docs dannydasilva/mkdocs-material gh-deploy Your documentation should shortly appear at <$username>.github.io/<$your_github_repository> . virtualenv or pip Assuming you are in a virtual environment mkdocs gh-deploy Your documentation should shortly appear at <$username>.github.io/<$your_github_repository> .","title":"Setup"},{"location":"#getting-started","text":"Begin by cloning the repo and pathing into it git clone https://github.com/Danny-Dasilva/mkdocs-material.git && cd mkdocs-material","title":"Getting started"},{"location":"#install-dependencies","text":"pipenv In case you do not have pipenv you can install it with pip install pipenv Install dependencies with pipenv install Warning: Your Pipfile requires python_version 3.8 This pipenv file was created using python 3.8 however it is not a requirement to run the package. You can tack on --python <$your version> to pipenv in order to run it with that python version. Example : pipenv install --python 3 .7 docker The Docker image is a great way to get up and running in a few minutes, as it comes with all dependencies pre-installed. Pull the image for the latest version with: docker pull dannydasilva/mkdocs-material The mkdocs executable is provided as an entry point and serve is the default command. If you're not familiar with Docker don't worry, the following sections cover how to serve build and deploy. The following plugins are bundled with the Docker image: markdown-include mkdocs-markdownextradata-plugin as well as others How can I add plugins to the Docker image? The docker container bundles useful and common plugins on top of the standard mkdocs container however if the plugin you want to use is not included, you can create a new Dockerfile and extend the Docker image with your custom installation routine: FROM dannydasilva/mkdocs-material RUN pip install ... Next, you can build the image with the following command. docker build -t dannydasilva/mkdocs-material . The new image can be used exactly like the default image, the commands below will operate the same. virtualenv or pip Using a virtual environment is not a requirement but is highly suggested. You can install the dependencies on the system with. pip install -r requirements.txt If you would prefer to use virtualenv you can install it with pip install virtualenv create the environment virtualenv venv Activate the environment Mac OS / Linux source venv/bin/activate Windows venv\\Scripts\\activate and finally install the dependencies pip install -r requirements.txt","title":"Install dependencies"},{"location":"#make-changes","text":"Feel free to make changes to the index.md or add your own files. The navigation tree is generated from the mkdocs.yaml file. Lets say I created example.md in /docs i could add it to the site navigation by adding the filename to the .yaml file. in mkdocs.yml 28 29 30 31 32 33 34 35 36 37 # add navigation here nav : - MkDocs : index.md - features.md - customization.md - Example - Nested folder : - Index.md with title : example-folder/index.md - Sub folder : - Custom Title : example-folder/sub-folder/index.md - example.md","title":"Make changes"},{"location":"#nesting-folders","text":"For larger sections where you need to break markdown files with a similar theme you may consider nesting your file structure. Lets say we wanted to add nested_example.md to docs/example-folder/sub-folder/ . We can add it to the navigation 28 29 30 31 32 33 34 35 36 37 38 # add navigation here nav : - MkDocs : index.md - features.md - customization.md - Example - Nested folder : - Index.md with title : example-folder/index.md - Sub folder : - Custom Title : example-folder/sub-folder/index.md - Nesting folder : example-folder/sub-folder/nested_example.md - example.md Note how the titles and navigation use the file name by default. You can overide this with the following syntax -Custom title: path/to/file.md","title":"Nesting folders"},{"location":"#run-build-and-deploy","text":"You can run mkdocs locally to preview changes, build out the html files or deploy to github pages with the following commands","title":"Run Build and Deploy"},{"location":"#run","text":"While you are editing your content you can use the live preview feature to see your changes. The server will automatically rebuild upon saving. By default the server will be hosted at localhost:8000 . pipenv Quick pipenv run mkdocs serve Work inside env alternatively you can shell into your pipenv instance and serve it there pipenv shell then mkdocs serve docker Mount the folder where your mkdocs.yml resides as a volume into /docs: Start development server on http://localhost:8000 docker run --rm -it -p 8000:8000 -v ${PWD}:/docs dannydasilva/mkdocs-material Deploy documentation to GitHub Pages docker run --rm -it -v ~/.ssh:/root/.ssh -v ${PWD}:/docs dannydasilva/mkdocs-material gh-deploy virtualenv or pip Assuming you are in a virtual environment mkdocs serve","title":"Run"},{"location":"#build","text":"When you're finished editing, you can build a static site from your Markdown files with: pipenv Build Documentation pipenv run mkdocs build docker Build Documentation docker run --rm -it -v ${PWD}:/docs dannydasilva/mkdocs-material build virtualenv or pip Assuming you are in a virtual environment mkdocs build","title":"Build"},{"location":"#deploy","text":"If you're already hosting your code on GitHub, GitHub Pages is certainly the most convenient way to publish your project documentation. It's free of charge and pretty easy to set up. pipenv deploy to gihub pages with: pipenv run mkdocs gh-deploy Your documentation should shortly appear at <$username>.github.io/<$your_github_repository> . docker Deploy documentation to GitHub Pages docker run --rm -it -v ~/.ssh:/root/.ssh -v ${PWD}:/docs dannydasilva/mkdocs-material gh-deploy Your documentation should shortly appear at <$username>.github.io/<$your_github_repository> . virtualenv or pip Assuming you are in a virtual environment mkdocs gh-deploy Your documentation should shortly appear at <$username>.github.io/<$your_github_repository> .","title":"Deploy"},{"location":"customization/","text":"Changing the colors \u00b6 As any proper Material Design implementation, Material for MkDocs supports Google's original color palette , which can be easily configured through mkdocs.yml . Furthermore, colors can be customized with a few lines of CSS to fit your brand's identity by using CSS variables . Configuration \u00b6 Color palette \u00b6 Color scheme \u00b6 Source \u00b7 Default: default Material for MkDocs supports two color schemes : a light mode, which is just called default , and a dark mode, which is called slate . The color scheme can be set via mkdocs.yml to preference : theme : palette : scheme : preference Click on a tile to change the color scheme: default slate iceberg var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_0 code span:nth-child(7)\") name.textContent = attr }) }) Primary color \u00b6 Source \u00b7 Default: indigo The primary color is used for the header, the sidebar, text links and several other components. In order to change the primary color, set the following value in mkdocs.yml to a valid color name: theme : palette : primary : indigo Click on a tile to change the primary color: red pink purple deep purple indigo blue light blue cyan teal green light green lime yellow amber orange deep orange brown grey blue grey black white iceberg custom_color [data-md-color-primary=\"custom_color\"] { --md-primary-fg-color: red } var buttons = document.querySelectorAll(\"button[data-md-color-primary]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-primary\") document.body.setAttribute(\"data-md-color-primary\", attr) var name = document.querySelector(\"#__code_2 code span:nth-child(7)\") name.textContent = attr.replace(\"-\", \" \") }) }) Accent color \u00b6 Source \u00b7 Default: indigo The accent color is used to denote elements that can be interacted with, e.g. hovered links, buttons and scrollbars. It can be changed in mkdocs.yml by choosing a valid color name: theme : palette : accent : indigo Click on a tile to change the accent color: .md-typeset button[data-md-color-accent] > code { background-color: var(--md-code-bg-color); color: var(--md-accent-fg-color); } red pink purple deep purple indigo blue light blue cyan teal green light green lime yellow amber orange deep orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-accent\") document.body.setAttribute(\"data-md-color-accent\", attr) var name = document.querySelector(\"#__code_3 code span:nth-child(7)\") name.textContent = attr.replace(\"-\", \" \") }) }) custom css \u00b6 Logo \u00b6 The logo can be changed in the mkdocs.yaml file in mkdocs.yml 13 14 15 #change logo here logo : img/logo-white.svg favicon : img/favicon.png Additional CSS and Javascript \u00b6 CSS If you want to tweak some colors or change the spacing of certain elements, you can do this in a separate stylesheet. The easiest way is by creating a new stylesheet file in the docs/ directory: \u251c\u2500 docs/ \u2502 \u2514\u2500 stylesheets/ \u2502 \u2514\u2500 extra.css \u2514\u2500 mkdocs.yml Then, add the following line to mkdocs.yml: extra_css : - stylesheets/extra.css Javascript The same is true for additional JavaScript. If you want to integrate another syntax highlighter or add some custom logic to your theme, create a new JavaScript file in the docs/ directory: \u251c\u2500 docs/ \u2502 \u2514\u2500 javascripts/ \u2502 \u2514\u2500 extra.js \u2514\u2500 mkdocs.yml Then, add the following line to mkdocs.yml: extra_css : - javascripts/extra.js Custom colors \u00b6 Source \u00b7 Difficulty: easy Material for MkDocs implements colors using CSS variables (custom properties). If you want to customize the colors beyond the palette (e.g. to use your brand-specific colors), you can add an additional stylesheet and tweak the values of the CSS variables. Let's say you're YouTube , and want to set the primary color to your brand's palette. Just add: : root { -- md-primary-fg-color : #EE0F0F ; -- md-primary-fg-color--light : #ECB7B7 ; -- md-primary-fg-color--dark : #90030C ; } See the file containing the color definitions for a list of all CSS variables. Custom color schemes \u00b6 Source \u00b7 Difficulty: easy Besides overriding specific colors, you can create your own, named color scheme by wrapping the definitions in the [ data-md-color-scheme = \"...\" ] attribute selector , which you can then set via mkdocs.yml as described in the [color schemes][7] section: [ data-md-color-scheme = \"youtube\" ] { -- md-primary-fg-color : #EE0F0F ; -- md-primary-fg-color--light : #ECB7B7 ; -- md-primary-fg-color--dark : #90030C ; } Additionally, the slate color scheme defines all of it's colors via hsla color functions and deduces its colors from the --md-hue CSS variable. You can tune the slate theme with: [ data-md-color-scheme = \"slate\" ] { -- md-hue : 210 ; /* [0, 360] */ } Styling code blocks \u00b6 Python from __future__ import annotations from datetime import date # random Person class Person : def __init__ ( self , name : str , age : int ): self . name = name self . age = age @classmethod def fromBirthYear ( cls , name : str , birthYear : int ) -> Person : return cls ( name , date . today () . year - birthYear ) def __repr__ ( self ) -> str : return f \" { self . name } 's age is: { str ( self . age ) } \" person = Person ( 'Adam' , 19 ) print ( person ) person1 = Person . fromBirthYear ( 'John' , 1985 ) print ( person1 ) Javacript import '/modules/my-module.js' ; class Person { constructor ( name , age ) { this . _name = name ; this . _age = age ; } //unused Method increaseAge () { this . _age += 1 ; } } var fromBirthYear = ( name , age ) => { var year = new Date (). getFullYear () return new Person ( name , year - age ) } const person = new Person ( \"Adam\" , 19 ) console . log ( person ) const person1 = fromBirthYear ( 'John' , 1985 ) console . log ( person1 ) HTML <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Document </ title > <!-- CSS --> < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css\" crossorigin = \"anonymous\" > </ head > < body > < picture > < source type = \"image/avif\" srcset = \"https://picture-demo.netlify.app/photo.avif\" > < source type = \"image/webp\" srcset = \"https://picture-demo.netlify.app/photo.webp\" > < img src = \"https://picture-demo.netlify.app/photo.jpg\" alt = \"Red Panda\" > </ picture > </ body > <!-- jQuery and JS bundle w/ Popper.js --> < script src = \"https://code.jquery.com/jquery-3.5.1.slim.min.js\" crossorigin = \"anonymous\" async ></ script > < script src = \"https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.bundle.min.js\" crossorigin = \"anonymous\" async ></ script > </ html > CSS : root { -- main-bg-color : red ; } . one { color : white ; background-color : var ( -- main - bg - color ); margin : 10 px ; width : 50 px ; height : 50 px ; display : inline-block ; } . two { color : white ; background-color : var ( -- main - bg - color ); margin : 10 px ; width : 150 px ; height : 70 px ; display : inline-block ; } Bash #!/bin/bash ARG = $1 function mimic { if [[ -z $ARG ]] ; then ARG = 'world' fi echo \"hello $ARG \" } mimic $ARG Java public class MyClass { int x = 5 ; public static void main ( String [] args ) { MyClass myObj = new MyClass (); System . out . println ( myObj . x ); } } C int main ( void ) { RectangleClass r1 ; rectangle_new_with_lengths ( & r1 , 4.f , 5.f ); printf ( \"rectangle r1's area is %f units square \\n \" , shape_computeArea ( & r1 )); return 0 ; } Go package employee import ( \"fmt\" ) type employee struct { firstName string lastName string totalLeaves int leavesTaken int } func New ( firstName string , lastName string , totalLeave int , leavesTaken int ) employee { e := employee { firstName , lastName , totalLeave , leavesTaken } return e } func ( e employee ) LeavesRemaining () { fmt . Printf ( \"%s %s has %d leaves remaining\\n\" , e . firstName , e . lastName , ( e . totalLeaves - e . leavesTaken )) }","title":"Changing the colors"},{"location":"customization/#changing-the-colors","text":"As any proper Material Design implementation, Material for MkDocs supports Google's original color palette , which can be easily configured through mkdocs.yml . Furthermore, colors can be customized with a few lines of CSS to fit your brand's identity by using CSS variables .","title":"Changing the colors"},{"location":"customization/#configuration","text":"","title":"Configuration"},{"location":"customization/#color-palette","text":"","title":"Color palette"},{"location":"customization/#color-scheme","text":"Source \u00b7 Default: default Material for MkDocs supports two color schemes : a light mode, which is just called default , and a dark mode, which is called slate . The color scheme can be set via mkdocs.yml to preference : theme : palette : scheme : preference Click on a tile to change the color scheme: default slate iceberg var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_0 code span:nth-child(7)\") name.textContent = attr }) })","title":"Color scheme"},{"location":"customization/#primary-color","text":"Source \u00b7 Default: indigo The primary color is used for the header, the sidebar, text links and several other components. In order to change the primary color, set the following value in mkdocs.yml to a valid color name: theme : palette : primary : indigo Click on a tile to change the primary color: red pink purple deep purple indigo blue light blue cyan teal green light green lime yellow amber orange deep orange brown grey blue grey black white iceberg custom_color [data-md-color-primary=\"custom_color\"] { --md-primary-fg-color: red } var buttons = document.querySelectorAll(\"button[data-md-color-primary]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-primary\") document.body.setAttribute(\"data-md-color-primary\", attr) var name = document.querySelector(\"#__code_2 code span:nth-child(7)\") name.textContent = attr.replace(\"-\", \" \") }) })","title":"Primary color"},{"location":"customization/#accent-color","text":"Source \u00b7 Default: indigo The accent color is used to denote elements that can be interacted with, e.g. hovered links, buttons and scrollbars. It can be changed in mkdocs.yml by choosing a valid color name: theme : palette : accent : indigo Click on a tile to change the accent color: .md-typeset button[data-md-color-accent] > code { background-color: var(--md-code-bg-color); color: var(--md-accent-fg-color); } red pink purple deep purple indigo blue light blue cyan teal green light green lime yellow amber orange deep orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-accent\") document.body.setAttribute(\"data-md-color-accent\", attr) var name = document.querySelector(\"#__code_3 code span:nth-child(7)\") name.textContent = attr.replace(\"-\", \" \") }) })","title":"Accent color"},{"location":"customization/#custom-css","text":"","title":"custom css"},{"location":"customization/#logo","text":"The logo can be changed in the mkdocs.yaml file in mkdocs.yml 13 14 15 #change logo here logo : img/logo-white.svg favicon : img/favicon.png","title":"Logo"},{"location":"customization/#additional-css-and-javascript","text":"CSS If you want to tweak some colors or change the spacing of certain elements, you can do this in a separate stylesheet. The easiest way is by creating a new stylesheet file in the docs/ directory: \u251c\u2500 docs/ \u2502 \u2514\u2500 stylesheets/ \u2502 \u2514\u2500 extra.css \u2514\u2500 mkdocs.yml Then, add the following line to mkdocs.yml: extra_css : - stylesheets/extra.css Javascript The same is true for additional JavaScript. If you want to integrate another syntax highlighter or add some custom logic to your theme, create a new JavaScript file in the docs/ directory: \u251c\u2500 docs/ \u2502 \u2514\u2500 javascripts/ \u2502 \u2514\u2500 extra.js \u2514\u2500 mkdocs.yml Then, add the following line to mkdocs.yml: extra_css : - javascripts/extra.js","title":"Additional CSS and Javascript"},{"location":"customization/#custom-colors","text":"Source \u00b7 Difficulty: easy Material for MkDocs implements colors using CSS variables (custom properties). If you want to customize the colors beyond the palette (e.g. to use your brand-specific colors), you can add an additional stylesheet and tweak the values of the CSS variables. Let's say you're YouTube , and want to set the primary color to your brand's palette. Just add: : root { -- md-primary-fg-color : #EE0F0F ; -- md-primary-fg-color--light : #ECB7B7 ; -- md-primary-fg-color--dark : #90030C ; } See the file containing the color definitions for a list of all CSS variables.","title":"Custom colors"},{"location":"customization/#custom-color-schemes","text":"Source \u00b7 Difficulty: easy Besides overriding specific colors, you can create your own, named color scheme by wrapping the definitions in the [ data-md-color-scheme = \"...\" ] attribute selector , which you can then set via mkdocs.yml as described in the [color schemes][7] section: [ data-md-color-scheme = \"youtube\" ] { -- md-primary-fg-color : #EE0F0F ; -- md-primary-fg-color--light : #ECB7B7 ; -- md-primary-fg-color--dark : #90030C ; } Additionally, the slate color scheme defines all of it's colors via hsla color functions and deduces its colors from the --md-hue CSS variable. You can tune the slate theme with: [ data-md-color-scheme = \"slate\" ] { -- md-hue : 210 ; /* [0, 360] */ }","title":"Custom color schemes"},{"location":"customization/#styling-code-blocks","text":"Python from __future__ import annotations from datetime import date # random Person class Person : def __init__ ( self , name : str , age : int ): self . name = name self . age = age @classmethod def fromBirthYear ( cls , name : str , birthYear : int ) -> Person : return cls ( name , date . today () . year - birthYear ) def __repr__ ( self ) -> str : return f \" { self . name } 's age is: { str ( self . age ) } \" person = Person ( 'Adam' , 19 ) print ( person ) person1 = Person . fromBirthYear ( 'John' , 1985 ) print ( person1 ) Javacript import '/modules/my-module.js' ; class Person { constructor ( name , age ) { this . _name = name ; this . _age = age ; } //unused Method increaseAge () { this . _age += 1 ; } } var fromBirthYear = ( name , age ) => { var year = new Date (). getFullYear () return new Person ( name , year - age ) } const person = new Person ( \"Adam\" , 19 ) console . log ( person ) const person1 = fromBirthYear ( 'John' , 1985 ) console . log ( person1 ) HTML <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Document </ title > <!-- CSS --> < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css\" crossorigin = \"anonymous\" > </ head > < body > < picture > < source type = \"image/avif\" srcset = \"https://picture-demo.netlify.app/photo.avif\" > < source type = \"image/webp\" srcset = \"https://picture-demo.netlify.app/photo.webp\" > < img src = \"https://picture-demo.netlify.app/photo.jpg\" alt = \"Red Panda\" > </ picture > </ body > <!-- jQuery and JS bundle w/ Popper.js --> < script src = \"https://code.jquery.com/jquery-3.5.1.slim.min.js\" crossorigin = \"anonymous\" async ></ script > < script src = \"https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.bundle.min.js\" crossorigin = \"anonymous\" async ></ script > </ html > CSS : root { -- main-bg-color : red ; } . one { color : white ; background-color : var ( -- main - bg - color ); margin : 10 px ; width : 50 px ; height : 50 px ; display : inline-block ; } . two { color : white ; background-color : var ( -- main - bg - color ); margin : 10 px ; width : 150 px ; height : 70 px ; display : inline-block ; } Bash #!/bin/bash ARG = $1 function mimic { if [[ -z $ARG ]] ; then ARG = 'world' fi echo \"hello $ARG \" } mimic $ARG Java public class MyClass { int x = 5 ; public static void main ( String [] args ) { MyClass myObj = new MyClass (); System . out . println ( myObj . x ); } } C int main ( void ) { RectangleClass r1 ; rectangle_new_with_lengths ( & r1 , 4.f , 5.f ); printf ( \"rectangle r1's area is %f units square \\n \" , shape_computeArea ( & r1 )); return 0 ; } Go package employee import ( \"fmt\" ) type employee struct { firstName string lastName string totalLeaves int leavesTaken int } func New ( firstName string , lastName string , totalLeave int , leavesTaken int ) employee { e := employee { firstName , lastName , totalLeave , leavesTaken } return e } func ( e employee ) LeavesRemaining () { fmt . Printf ( \"%s %s has %d leaves remaining\\n\" , e . firstName , e . lastName , ( e . totalLeaves - e . leavesTaken )) }","title":"Styling code blocks"},{"location":"features/","text":"Basics \u00b6 Ideally you have a basic understanding of markdown syntax however if you need a refresher feel free to visit here . The following are extra features built into mkdocs Bash terminal \u00b6 Using termynal.js and termynal.css in /docs/js and /docs/js respectively we can show terminal output. By wraping a console code block in a div tag with class=\"termy\" you can display a loading promt as well as example output in your markdown files. This termynal styling is provided courtesy of FastApi Example : <div class=\"termy\"> ```console $ some_example_command.sh ---> 100% INFO: Started server process [28722] INFO: Application startup complete. ``` </div> Result : $ some_example_command.sh ---> 100% INFO: Started server process [28722] INFO: Application startup complete. Code Blocks \u00b6 Source \u00b7 Extension \u00b7 Supersedes: CodeHilite The Highlight extension, which is part of Python Markdown Extensions , integrates with Material for MkDocs and provides several options for configuring syntax highlighting of code blocks, to see how to set up and configure this see the mkdocs-material documentation Usage \u00b6 Code blocks must be enclosed with two separate lines containing three backticks. To add code highlighting to those blocks, add the language short name directly after the opening block. See the list of available lexers to find the short name for a given language. Example : ``` python import tensorflow as tf ``` Result : import tensorflow as tf Adding line numbers \u00b6 Line numbers can be added to a code block by using the linenums=\"<start>\" option directly after the short name, whereas <start> represents the starting line number. A code block can start from a line number other than 1 , which allows splitting large code blocks for readability. Example : ``` python linenums=\"1\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Result : 1 2 3 4 5 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Starting at a different line number The number passed into range () will be the start of the line Example : ``` python linenums=\"7\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Result : 7 8 9 10 11 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Highlighting specific lines \u00b6 Specific lines can be highlighted by passing the line numbers to the hl_lines argument placed right after the language short name. Note that line counts start at 1 , regardless of the starting line number specified as part of linenums . Example : ``` python hl_lines=\"2 3\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Result : def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Highlighting inline code With InlineHilite enabled, inline code blocks can be highlighted by prefixing them with a shebang-like sequence, i.e. #! , directly followed by the short language name 17 . Example : The `#!python range()` function is used to generate a sequence of numbers. Result : The range () function is used to generate a sequence of numbers. Admonitions \u00b6 Source \u00b7 Extension Admonitions, also known as call-outs, are an devent choice for including side content without significantly interrupting the document flow. Material for MkDocs provides several different types of admonitions and allows for the inclusion and nesting of arbitrary content. A details block follows the syntax and semantics of admonition blocks, but must start with ??? . The ??? can then be followed by a admonition type e.g. example (view supported types) . Collapsed Blocks \u00b6 Example : ??? example Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result : Example Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Open blocks \u00b6 You can add a \"title\" by adding quotations after your supported admonition type (view supported types) . Adding a + after ??? will render the block as open on page load: Example : ???+ note \"Example Title\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result : Example Title Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. There are many supported admonition types and these can be added to explain bugs or issues users may encounter. You can fit code blocks or any other mkdocs markdown inside these blocks so feel free to use them to add collapsible content. No title Icon or Bar Similar to changing the title, the icon and title can be omitted entirely by adding an empty string directly after the type qualifier. Note that this will not work for collapsible blocks. !!! note \"\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result : Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Images \u00b6 You can add images using the following syntax ![Placeholder_text](path/to/img.jpg) . You can add images in the docs/img folder and reference them in markdown. When the Attribute List extension is enabled, images can be aligned by adding the respective alignment directions via the align attribute, i.e. align=left or align=right . Along with this you can assign width with the syntax width=200 . Alignment \u00b6 Left Example : ![Placeholder](img/example.png){: align=left width=300 } Result : Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Right Example : ![Placeholder](https://dummyimage.com/600x400/eee/aaa){: align=right } Result : Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. If there's insufficient space to render the text next to the image, the image will stretch to the full width of the viewport, e.g. on mobile viewports. Image captions \u00b6 Sadly, the Markdown syntax doesn't provide native support for image captions, but it's always possible to resort to HTML. Using figure and figcaption , captions can be added to images. Example : < figure > < img src = \"https://dummyimage.com/600x400/eee/aaa\" width = \"300\" /> < figcaption > Image caption </ figcaption > </ figure > Result : Image caption Image lazy-loading Modern browsers provide native support for lazy-loading images through the loading attribute, which degrades to eager-loading in browsers without support. As with image alignment , if the Attribute List extension is enabled, images can be lazy-loaded by adding loading=lazy . Example : ![Placeholder](https://dummyimage.com/600x400/eee/aaa){: loading=lazy } Content tabs \u00b6 Sometimes, it's desirable to group alternative content under different tabs, e.g. when describing how to access an API from different languages or environments. Material for MkDocs allows for beautiful and functional tabs, grouping code blocks and other content see example docs . Example : === \"C\" ``` c #include <stdio.h> int main(void) { printf(\"Hello world!\\n\"); return 0; } ``` === \"C++\" ``` c++ #include <iostream> int main(void) { std::cout << \"Hello world!\" << std::endl; return 0; } ``` Result : C #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } C++ #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; } Grouping other content With InlineHilite enabled, inline code blocks can be highlighted by prefixing them with a shebang-like sequence, i.e. #! , directly followed by the short language name 17 . Example : === \"Example Content\" ### Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet `Lorem ipsum dolor sit amet` === \"Ordered list\" 1. Sed sagittis eleifend rutrum 2. Donec vitae suscipit est 3. Nulla tempor lobortis orci Result : Example Content Lorem ipsum dolor sit amet \u00b6 Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet Ordered list Sed sagittis eleifend rutrum Donec vitae suscipit est Nulla tempor lobortis orci Icons \u00b6 Material for mkdocs supports more than 7,000 icons and thousands of emojis with very little effort. Material design, font awesome and octicons icons are supported Emojis and Icons can be integrated in Markdown by putting the shortcode of the emoji between two colons. To see how to add custom css rules to Icons as well as custom Icons see the mkdocs icon documentation . Example : :smile: :material-account-circle: \u2013 `.icons/material/account-circle.svg` :fontawesome-regular-laugh-wink: \u2013 `.icons/fontawesome/regular/laugh-wink.svg` :octicons-octoface-16: \u2013 `.icons/octicons/octoface-16.svg` Result : \u2013 .icons/material/account-circle.svg \u2013 .icons/fontawesome/regular/laugh-wink.svg \u2013 .icons/octicons/octoface-16.svg Data tables \u00b6 Data tables can be used at any position in your project documentation and can contain arbitrary Markdown, including inline code blocks, as well as icons and emojis . Example : | Method | Description | | ----------- | ------------------------------------ | | `GET` | :material-check: Fetch resource | | `PUT` | :material-check-all: Update resource | | `DELETE` | :material-close: Delete resource | Result : Method Description GET Fetch resource PUT Update resource DELETE Delete resource Tasklists \u00b6 When the Tasklist extension is enabled, unordered list items can be prefixed with [ ] to render an unchecked or [x] to render a checked checkbox. Along with normal markdown lists which can be prefficed with * or 1. tasklists provide you a way of annotating completed tasks. Example : * [x] Lorem ipsum dolor sit amet, consectetur adipiscing elit * [ ] Vestibulum convallis sit amet nisi a tincidunt * [x] In hac habitasse platea dictumst * [x] In scelerisque nibh non dolor mollis congue sed et metus * [ ] Praesent sed risus massa * [ ] Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque Result : Lorem ipsum dolor sit amet, consectetur adipiscing elit Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque Footnotes and Links \u00b6 Footnotes are a great way to add references to supplemental or additional information for a specific section of a document without interrupting the document flow. Material for MkDocs provides the ability to insert inline footnotes and render them at the bottom of the page. A footnote reference must be enclosed in square brackets and must start with a caret ^ , directly followed by an arbitrary identifier, which is similar to the standard Markdown link syntax. Along with this you can just use an arbitrary identifier in square brackets to insert a link. Example : Lorem ipsum[^1] dolor sit amet, consectetur adipiscing elit.[^2] Lorem ipsum[1] dolor sit amet, consectetur adipiscing elit[2]. Result : Lorem ipsum 1 dolor sit amet, consectetur adipiscing elit.[^2] Lorem ipsum dolor sit amet, consectetur adipiscing elit . Adding footnote content \u00b6 The footnote content must be declared with the same identifier as the reference. It can be inserted at an arbitrary position in the document and is always rendered at the bottom of the page. Furthermore, a backlink to the footnote reference is automatically added. on a single line \u00b6 Short statements can be written on the same line. Example : [^1]: Lorem ipsum dolor sit amet, consectetur adipiscing elit. [2]: https://github.com/squidfunk/mkdocs-material/blob/master/src/assets/stylesheets/main/extensions/pymdownx/_highlight.scss Result : Jump to footnote at the bottom of the page Or click the link on the highlighted words to follow the link Lorem ipsum dolor sit amet, consectetur adipiscing elit. \u21a9","title":"Features"},{"location":"features/#basics","text":"Ideally you have a basic understanding of markdown syntax however if you need a refresher feel free to visit here . The following are extra features built into mkdocs","title":"Basics"},{"location":"features/#bash-terminal","text":"Using termynal.js and termynal.css in /docs/js and /docs/js respectively we can show terminal output. By wraping a console code block in a div tag with class=\"termy\" you can display a loading promt as well as example output in your markdown files. This termynal styling is provided courtesy of FastApi Example : <div class=\"termy\"> ```console $ some_example_command.sh ---> 100% INFO: Started server process [28722] INFO: Application startup complete. ``` </div> Result : $ some_example_command.sh ---> 100% INFO: Started server process [28722] INFO: Application startup complete.","title":"Bash terminal"},{"location":"features/#code-blocks","text":"Source \u00b7 Extension \u00b7 Supersedes: CodeHilite The Highlight extension, which is part of Python Markdown Extensions , integrates with Material for MkDocs and provides several options for configuring syntax highlighting of code blocks, to see how to set up and configure this see the mkdocs-material documentation","title":"Code Blocks"},{"location":"features/#usage","text":"Code blocks must be enclosed with two separate lines containing three backticks. To add code highlighting to those blocks, add the language short name directly after the opening block. See the list of available lexers to find the short name for a given language. Example : ``` python import tensorflow as tf ``` Result : import tensorflow as tf","title":"Usage"},{"location":"features/#adding-line-numbers","text":"Line numbers can be added to a code block by using the linenums=\"<start>\" option directly after the short name, whereas <start> represents the starting line number. A code block can start from a line number other than 1 , which allows splitting large code blocks for readability. Example : ``` python linenums=\"1\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Result : 1 2 3 4 5 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Starting at a different line number The number passed into range () will be the start of the line Example : ``` python linenums=\"7\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Result : 7 8 9 10 11 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ]","title":"Adding line numbers"},{"location":"features/#highlighting-specific-lines","text":"Specific lines can be highlighted by passing the line numbers to the hl_lines argument placed right after the language short name. Note that line counts start at 1 , regardless of the starting line number specified as part of linenums . Example : ``` python hl_lines=\"2 3\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Result : def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Highlighting inline code With InlineHilite enabled, inline code blocks can be highlighted by prefixing them with a shebang-like sequence, i.e. #! , directly followed by the short language name 17 . Example : The `#!python range()` function is used to generate a sequence of numbers. Result : The range () function is used to generate a sequence of numbers.","title":"Highlighting specific lines"},{"location":"features/#admonitions","text":"Source \u00b7 Extension Admonitions, also known as call-outs, are an devent choice for including side content without significantly interrupting the document flow. Material for MkDocs provides several different types of admonitions and allows for the inclusion and nesting of arbitrary content. A details block follows the syntax and semantics of admonition blocks, but must start with ??? . The ??? can then be followed by a admonition type e.g. example (view supported types) .","title":"Admonitions"},{"location":"features/#collapsed-blocks","text":"Example : ??? example Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result : Example Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Collapsed Blocks"},{"location":"features/#open-blocks","text":"You can add a \"title\" by adding quotations after your supported admonition type (view supported types) . Adding a + after ??? will render the block as open on page load: Example : ???+ note \"Example Title\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result : Example Title Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. There are many supported admonition types and these can be added to explain bugs or issues users may encounter. You can fit code blocks or any other mkdocs markdown inside these blocks so feel free to use them to add collapsible content. No title Icon or Bar Similar to changing the title, the icon and title can be omitted entirely by adding an empty string directly after the type qualifier. Note that this will not work for collapsible blocks. !!! note \"\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result : Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Open blocks"},{"location":"features/#images","text":"You can add images using the following syntax ![Placeholder_text](path/to/img.jpg) . You can add images in the docs/img folder and reference them in markdown. When the Attribute List extension is enabled, images can be aligned by adding the respective alignment directions via the align attribute, i.e. align=left or align=right . Along with this you can assign width with the syntax width=200 .","title":"Images"},{"location":"features/#alignment","text":"Left Example : ![Placeholder](img/example.png){: align=left width=300 } Result : Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Right Example : ![Placeholder](https://dummyimage.com/600x400/eee/aaa){: align=right } Result : Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. If there's insufficient space to render the text next to the image, the image will stretch to the full width of the viewport, e.g. on mobile viewports.","title":"Alignment"},{"location":"features/#image-captions","text":"Sadly, the Markdown syntax doesn't provide native support for image captions, but it's always possible to resort to HTML. Using figure and figcaption , captions can be added to images. Example : < figure > < img src = \"https://dummyimage.com/600x400/eee/aaa\" width = \"300\" /> < figcaption > Image caption </ figcaption > </ figure > Result : Image caption Image lazy-loading Modern browsers provide native support for lazy-loading images through the loading attribute, which degrades to eager-loading in browsers without support. As with image alignment , if the Attribute List extension is enabled, images can be lazy-loaded by adding loading=lazy . Example : ![Placeholder](https://dummyimage.com/600x400/eee/aaa){: loading=lazy }","title":"Image captions"},{"location":"features/#content-tabs","text":"Sometimes, it's desirable to group alternative content under different tabs, e.g. when describing how to access an API from different languages or environments. Material for MkDocs allows for beautiful and functional tabs, grouping code blocks and other content see example docs . Example : === \"C\" ``` c #include <stdio.h> int main(void) { printf(\"Hello world!\\n\"); return 0; } ``` === \"C++\" ``` c++ #include <iostream> int main(void) { std::cout << \"Hello world!\" << std::endl; return 0; } ``` Result : C #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } C++ #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; } Grouping other content With InlineHilite enabled, inline code blocks can be highlighted by prefixing them with a shebang-like sequence, i.e. #! , directly followed by the short language name 17 . Example : === \"Example Content\" ### Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet `Lorem ipsum dolor sit amet` === \"Ordered list\" 1. Sed sagittis eleifend rutrum 2. Donec vitae suscipit est 3. Nulla tempor lobortis orci Result : Example Content","title":"Content tabs"},{"location":"features/#lorem-ipsum-dolor-sit-amet","text":"Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet Ordered list Sed sagittis eleifend rutrum Donec vitae suscipit est Nulla tempor lobortis orci","title":"Lorem ipsum dolor sit amet"},{"location":"features/#icons","text":"Material for mkdocs supports more than 7,000 icons and thousands of emojis with very little effort. Material design, font awesome and octicons icons are supported Emojis and Icons can be integrated in Markdown by putting the shortcode of the emoji between two colons. To see how to add custom css rules to Icons as well as custom Icons see the mkdocs icon documentation . Example : :smile: :material-account-circle: \u2013 `.icons/material/account-circle.svg` :fontawesome-regular-laugh-wink: \u2013 `.icons/fontawesome/regular/laugh-wink.svg` :octicons-octoface-16: \u2013 `.icons/octicons/octoface-16.svg` Result : \u2013 .icons/material/account-circle.svg \u2013 .icons/fontawesome/regular/laugh-wink.svg \u2013 .icons/octicons/octoface-16.svg","title":"Icons"},{"location":"features/#data-tables","text":"Data tables can be used at any position in your project documentation and can contain arbitrary Markdown, including inline code blocks, as well as icons and emojis . Example : | Method | Description | | ----------- | ------------------------------------ | | `GET` | :material-check: Fetch resource | | `PUT` | :material-check-all: Update resource | | `DELETE` | :material-close: Delete resource | Result : Method Description GET Fetch resource PUT Update resource DELETE Delete resource","title":"Data tables"},{"location":"features/#tasklists","text":"When the Tasklist extension is enabled, unordered list items can be prefixed with [ ] to render an unchecked or [x] to render a checked checkbox. Along with normal markdown lists which can be prefficed with * or 1. tasklists provide you a way of annotating completed tasks. Example : * [x] Lorem ipsum dolor sit amet, consectetur adipiscing elit * [ ] Vestibulum convallis sit amet nisi a tincidunt * [x] In hac habitasse platea dictumst * [x] In scelerisque nibh non dolor mollis congue sed et metus * [ ] Praesent sed risus massa * [ ] Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque Result : Lorem ipsum dolor sit amet, consectetur adipiscing elit Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque","title":"Tasklists"},{"location":"features/#footnotes-and-links","text":"Footnotes are a great way to add references to supplemental or additional information for a specific section of a document without interrupting the document flow. Material for MkDocs provides the ability to insert inline footnotes and render them at the bottom of the page. A footnote reference must be enclosed in square brackets and must start with a caret ^ , directly followed by an arbitrary identifier, which is similar to the standard Markdown link syntax. Along with this you can just use an arbitrary identifier in square brackets to insert a link. Example : Lorem ipsum[^1] dolor sit amet, consectetur adipiscing elit.[^2] Lorem ipsum[1] dolor sit amet, consectetur adipiscing elit[2]. Result : Lorem ipsum 1 dolor sit amet, consectetur adipiscing elit.[^2] Lorem ipsum dolor sit amet, consectetur adipiscing elit .","title":"Footnotes and Links"},{"location":"features/#adding-footnote-content","text":"The footnote content must be declared with the same identifier as the reference. It can be inserted at an arbitrary position in the document and is always rendered at the bottom of the page. Furthermore, a backlink to the footnote reference is automatically added.","title":"Adding footnote content"},{"location":"features/#on-a-single-line","text":"Short statements can be written on the same line. Example : [^1]: Lorem ipsum dolor sit amet, consectetur adipiscing elit. [2]: https://github.com/squidfunk/mkdocs-material/blob/master/src/assets/stylesheets/main/extensions/pymdownx/_highlight.scss Result : Jump to footnote at the bottom of the page Or click the link on the highlighted words to follow the link Lorem ipsum dolor sit amet, consectetur adipiscing elit. \u21a9","title":"on a single line"},{"location":"install/","text":"Installing dependencies using pipenv \u00b6 Installing dependencies using virtualenv \u00b6 Depencies with docker \u00b6","title":"Install"},{"location":"install/#installing-dependencies-using-pipenv","text":"","title":"Installing dependencies using pipenv"},{"location":"install/#installing-dependencies-using-virtualenv","text":"","title":"Installing dependencies using virtualenv"},{"location":"install/#depencies-with-docker","text":"","title":"Depencies with docker"},{"location":"release-notes/","text":"0 1 2 3 4 5 {6}","title":"Release notes"},{"location":"example-folder/","text":"example title \u00b6","title":"Index.md with title"},{"location":"example-folder/#example-title","text":"","title":"example title"},{"location":"example-folder/sub-folder/","text":"","title":"Custom Title"}]}